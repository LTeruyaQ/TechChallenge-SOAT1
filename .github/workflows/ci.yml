name: CI

on:
  push:
    branches: [ "feature/*" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restaurar depend√™ncias
        run: dotnet restore MecanicaOS.sln

      - name: Compilar o projeto
        run: dotnet build MecanicaOS.sln --no-restore

      - name: Executar testes unit√°rios
        run: |
          chmod +x .github/scripts/check_test_success.sh
          .github/scripts/check_test_success.sh

      - name: Construir imagem Docker para valida√ß√£o
        run: docker build . --file Dockerfile --tag mecanica-os-api:latest

  create-pr:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Instalar depend√™ncias do CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Criar ou usar branch de release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -e
          git fetch --all

          echo "üîç Buscando branches de release existentes..."
          LATEST_RELEASE_BRANCH=$(git branch -r | grep 'origin/release/' | sed 's|origin/||' | sort -V | tail -n 1 || true)

          if [ -z "$LATEST_RELEASE_BRANCH" ]; then
            echo "‚ö†Ô∏è Nenhuma branch de release encontrada. Criando a primeira release (release/1.0.0)..."
            LATEST_RELEASE_BRANCH="release/1.0.0"
            git checkout main || git checkout Main
            git pull
            git checkout -b "$LATEST_RELEASE_BRANCH"
            git push origin "$LATEST_RELEASE_BRANCH"
          else
            echo "‚úÖ Branch de release mais recente encontrada: $LATEST_RELEASE_BRANCH"
          fi

          echo "A branch de release em uso ser√°: $LATEST_RELEASE_BRANCH"

          echo "üîÑ Garantindo que a branch de feature esteja atualizada no remoto..."
          git checkout ${{ github.ref_name }}
          git push origin ${{ github.ref_name }} || true

          echo "üîç Verificando se h√° diferen√ßas entre as branches..."
          if git diff --quiet origin/$LATEST_RELEASE_BRANCH origin/${{ github.ref_name }}; then
            echo "‚ö†Ô∏è Nenhuma diferen√ßa encontrada entre a feature e a release. Nenhum PR ser√° criado."
            exit 0
          fi

          echo "üîç Verificando PRs abertos..."
          OPEN_PR_COUNT=$(gh pr list --state open --head ${{ github.ref_name }} --base $LATEST_RELEASE_BRANCH --json number | jq 'length')

          if [ "$OPEN_PR_COUNT" -eq "0" ]; then
            echo "‚ú® Nenhum PR aberto encontrado. Criando novo Pull Request..."
            gh pr create \
              --base "$LATEST_RELEASE_BRANCH" \
              --head "${{ github.ref_name }}" \
              --title "PR da feature: ${{ github.ref_name }}" \
              --body "Este Pull Request foi gerado automaticamente pela pipeline de CI. Por favor, revise as altera√ß√µes."
          else
            echo "‚ÑπÔ∏è J√° existe um PR aberto para a branch $LATEST_RELEASE_BRANCH. Nenhuma a√ß√£o ser√° tomada."
          fi
