name: CI

on:
  push:
    branches:
      - "feature/*"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 9.0.x

      - name: Restaurar depend√™ncias
        run: dotnet restore MecanicaOS.sln

      - name: Compilar o projeto
        run: dotnet build MecanicaOS.sln --no-restore

      - name: Executar testes unit√°rios
        run: |
          chmod +x .github/scripts/check_test_success.sh
          .github/scripts/check_test_success.sh

      - name: Construir imagem Docker para valida√ß√£o
        run: docker build . --file Dockerfile --tag mecanica-os-api:latest

  create-pr:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout do c√≥digo completo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Instalar depend√™ncias CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Criar ou usar branch de release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          set -e

          echo "üîÑ Atualizando informa√ß√µes do remoto..."
          git remote set-url origin https://github.com/${{ github.repository }}.git
          git fetch origin --prune --tags

          echo "üîç Buscando branches de release existentes..."
          LATEST_RELEASE_BRANCH=$(git ls-remote --heads origin "release/*" | awk -F'/' '{print $3}' | sort -V | tail -n 1 || true)

          if [ -z "$LATEST_RELEASE_BRANCH" ]; then
            echo "‚ö†Ô∏è Nenhuma branch de release encontrada. Criando a primeira (release/1.0.0)..."
            LATEST_RELEASE_BRANCH="release/1.0.0"
            git checkout main || git checkout Main
            git pull origin main || git pull origin Main
            git checkout -b "$LATEST_RELEASE_BRANCH"
            git push origin "$LATEST_RELEASE_BRANCH"
          else
            echo "‚úÖ √öltima branch de release detectada: $LATEST_RELEASE_BRANCH"
          fi

          echo "üîÑ Garantindo branches locais..."
          git fetch origin "release/$LATEST_RELEASE_BRANCH":"release/$LATEST_RELEASE_BRANCH" || true
          git fetch origin "${{ github.ref_name }}":"${{ github.ref_name }}" || true

          echo "üì¶ Alternando para feature atual..."
          git checkout "${{ github.ref_name }}"
          git pull origin "${{ github.ref_name }}" || true

          echo "üîç Verificando se h√° diferen√ßas entre as branches..."
          if git diff --quiet "origin/release/$LATEST_RELEASE_BRANCH"...origin/${{ github.ref_name }}; then
            echo "‚ö†Ô∏è Nenhuma diferen√ßa entre a feature e a release. Nenhum PR ser√° criado."
            exit 0
          fi

          echo "üîç Verificando PRs abertos..."
          OPEN_PR_COUNT=$(gh pr list --state open --head "${{ github.ref_name }}" --base "release/$LATEST_RELEASE_BRANCH" --json number | jq 'length')

          if [ "$OPEN_PR_COUNT" -eq "0" ]; then
            echo "‚ú® Nenhum PR aberto encontrado. Criando novo Pull Request..."
            gh pr create \
              --base "release/$LATEST_RELEASE_BRANCH" \
              --head "${{ github.ref_name }}" \
              --title "PR autom√°tico: ${{ github.ref_name }}" \
              --body "Pull Request gerado automaticamente pela pipeline de CI. Revise as altera√ß√µes."
          else
            echo "‚ÑπÔ∏è J√° existe PR aberto para release/$LATEST_RELEASE_BRANCH."
          fi
